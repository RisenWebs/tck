generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Action {
  ACCOUNT_CREATE
  ACCOUNT_BAN
  ACCOUNT_DELETE
  ACCOUNT_UNBAN
  ACCOUNT_LOGIN
  CREATE_KICK_RAFFLE
  GIVEAWAY_CREATE
  GIVEAWAY_DELETE
  GIVEAWAY_UPDATE
  GIVEAWAY_JOIN
  JOIN_KICK_RAFFLE
  LINK_KICK
  LINK_DISCORD
  UPDATE_KICK
  USER_POINTS_ADD
  USER_POINTS_REMOVE
  USER_POINTS_SET
  RAFFLE_CREATE
  RAFFLE_UPDATE
  RAFFLE_DELETE
  RAFFLE_JOIN
}

enum Permission {
  ACCESS_ADMIN_PANEL
  CREATE_KICK_RAFFLE
  MANAGE_USERS
  MANAGE_LEADERBOARDS
  MANAGE_RAFFLES
  MANAGE_GIVEAWAYS
  MANAGE_IPS
  MANAGE_RELOADS
  USER_BAN
  USER_DELETE
  USER_UNBAN
  USER_MODIFY_PERMISSIONS
  USER_POINTS_ADD
  USER_POINTS_REMOVE
  USER_POINTS_SET
  USER_VIEW_ACTIVITY
  USER_VIEW_CONNECTIONS
  USER_VIEW_WALLET
  MANAGE_CLIPS
  MANAGE_CACHE
}

enum Platform {
  YOUTUBE
  TIKTOK
  TWITTER
  INSTAGRAM
  KICK
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model UnifiedCache {
  id           String     @id @default(cuid()) @map("_id")
  bestPayoutId String     @unique
  bestMultiId  String     @unique
  updatedAt    DateTime   @updatedAt

  bestPayout   BestPayout @relation(fields: [bestPayoutId], references: [id], onDelete: Cascade)
  bestMulti    BestMulti  @relation(fields: [bestMultiId], references: [id], onDelete: Cascade)
  bonus        Bonus[]    @relation("UnifiedCacheBonus")
  hunt         Hunt[]     @relation("UnifiedCacheHunt")

  @@index([id, updatedAt])
}

model BestPayout {
  id          String         @id @default(cuid()) @map("_id")
  slotName    String
  betSize     Float
  payout      Float
  multiplier  Float
  timestamp   DateTime

  unifiedCache UnifiedCache? @relation
  bestPayoutId String?       // This is now optional, Prisma will infer the relation from UnifiedCache
  @@index([slotName, timestamp])
}

model BestMulti {
  id          String         @id @default(cuid()) @map("_id")
  slotName    String
  betSize     Float
  payout      Float
  multiplier  Float

  unifiedCache UnifiedCache? @relation
  bestMultiId String?        // This is now optional, Prisma will infer the relation from UnifiedCache
  @@index([slotName])
}

model Bonus {
  id             String         @id @default(cuid()) @map("_id")
  name           String
  note           String
  active         Boolean
  providerId     Int
  providerName   String
  betSize        Float
  multiplier     Float
  payout         Float
  betSizeRaw     Float
  multiplierRaw  Float
  payoutRaw      Float

  unifiedCacheId String?
  unifiedCache   UnifiedCache? @relation("UnifiedCacheBonus", fields: [unifiedCacheId], references: [id])
  @@index([providerId, active])
}

model Hunt {
  id               String         @id @default(cuid()) @map("_id")
  name             String
  date             DateTime
  totalBets        Int
  totalWins        Int
  runningAvg       Float
  highestPayout    Float
  highestMultiplier Float

  unifiedCacheId String?
  unifiedCache   UnifiedCache? @relation("UnifiedCacheHunt", fields: [unifiedCacheId], references: [id])
  @@index([date])
}


model Vote {
  id        String   @id @default(cuid()) @map("_id")
  userId    String
  clipId    String
  voteType  VoteType
  createdAt DateTime @default(now()) 

  user      User     @relation(fields: [userId], references: [id])
  clip      Clip     @relation(fields: [clipId], references: [id])

  @@unique([userId, clipId])
  @@index([userId])
  @@index([clipId])
  @@index([voteType]) 
}

model Clip {
  id          String   @id @default(cuid()) @map("_id")
  title       String
  platform    Platform 
  videoClip   String   @unique 
  authorUser  String
  authorPfp   String 
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 

  votes       Vote[]   

  @@index([platform])
}

model UserAction {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  action      Action
  ip          String?
  timestamp   Int
  description String?
}

model KickAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userAccount   UserAccounts @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  userAccountId String       @unique @db.ObjectId

  kickId       Int    @unique
  kickUsername String @unique
}

model DiscordAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userAccount   UserAccounts @relation(fields: [userAccountId], references: [id], onDelete: Cascade)
  userAccountId String       @unique @db.ObjectId

  discordId String @unique
  discordUsername String @unique
  discordAvatar String @unique
  discordEmail String @unique
}

model UserAccounts {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  kick   KickAccount?
  discord DiscordAccount?

  csgobig String?
  gamdom  String?
  roobet  String?
  twitch  String?
}

model UserWallets {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  bitcoin       String?
  ethereum      String?
  litecoin      String?
  steamTradeUrl String?
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email    String @unique
  password String
  apiKey   String @unique

  accounts    UserAccounts?
  wallets     UserWallets?
  displayName String
  isAnonymous Boolean       @default(false)

  actions UserAction[]
  points  Int          @default(0)

  permissions Permission[]
  votes        Vote[]

  isBanned   Boolean @default(false)
  isVerified Boolean @default(false)

  giveawayEntries GiveawayEntry[]
  giveawayWins    Giveaway[]

  raffleEntries RaffleEntry[] @relation("UserToRaffleEntries")
  raffleWins    RaffleWinner[]

  accountVerification AccountVerification?

  isDeleted Boolean @default(false)

  kickVerification KickVerification?

  createdKickRaffles KickRaffle[]
}

model BannedIp {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  ip         String @unique
  bannedBy   String
  bannedById String @db.ObjectId
  reason     String
  timestamp  Int    @default(0)
}

model LeaderboardSpot {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  username      String
  amount        Int
  avatar        String
  leaderboard   Leaderboard? @relation(fields: [leaderboardId], references: [id])
  leaderboardId String?      @db.ObjectId
}

model Leaderboard {
  id    String            @id @default(auto()) @map("_id") @db.ObjectId
  type  String            @unique
  spots LeaderboardSpot[]
}

model GiveawayEntry {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  timestamp Int

  slot       Int
  giveaway   Giveaway @relation(fields: [giveawayId], references: [id])
  giveawayId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId     String   @db.ObjectId
}

model Giveaway {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  brand             String
  value             Float
  maxEntries        Int
  image             String
  entries           GiveawayEntry[]
  timestampCreation Int
  timestampEnd      Int
  winner            User?           @relation(fields: [winnerId], references: [id])
  winnerId          String?         @db.ObjectId
}

model StakeReloadEntry {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  timestamp Int

  stakeUsername   String
  discordUsername String
}

model RoobetReloadEntry {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  timestamp Int

  roobetUsername   String
  discordUsername String
}

model AccountVerification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  uuid String
}

model KickVerification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  verificationCode String

  timestamp Int
}

model KickRaffle {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  duration Int
  reward   Int
  entries  Int[]

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String @db.ObjectId

  timestamp Int
}

model RaffleEntry {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  timestamp  Int
  slot       Int
  raffle     Raffle  @relation("RaffleToEntries", fields: [raffleId], references: [id])
  raffleId   String  @db.ObjectId
  user       User    @relation("UserToRaffleEntries", fields: [userId], references: [id], onDelete: NoAction)
  userId     String  @db.ObjectId
}

model RaffleWinner {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  raffle   Raffle @relation(fields: [raffleId], references: [id])
  raffleId String  @db.ObjectId
  user     User    @relation(fields: [userId], references: [id])
  userId   String  @db.ObjectId
}

model Raffle {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  value             Float
  maxEntries        Int
  maxWinners        Int             // Added field for maximum winners
  image             String
  entries           RaffleEntry[]   @relation("RaffleToEntries")
  timestampCreation Int
  timestampEnd      Int
  winners           RaffleWinner[]  // Changed from single winner to multiple winners
}